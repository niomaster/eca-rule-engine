IMPORT standaard
IMPORT simple_wordcloud
IMPORT eca_math
IMPORT eca_string
IMPORT utility
IMPORT thermometer
IMPORT image
IMPORT parse_json


CELL 'bata_tweetlist' {'event': 'createTweetlistGadget', 'data': [json_serialize({"cell": "bata_tweetlist", "id": "bataTweetlist"})]}
CELL 'stand_tweetlist' {'event': 'createTweetlistGadget', 'data': [json_serialize({"cell": "stand_tweetlist", "id": "standTweetlist", "title": "Laatste updates tussenstand"})]}
CELL 'wordcloudcell' {'event': 'createWordCloudGadget', 'data': [json_serialize({"cell": "wordcloudcell", "id": "myWordCloud", "title": "Emotie cloud"})]}
CELL 'thermometer' {'event': 'createThermometerGadget', 'data': [json_serialize({"cell": "thermometercell", "id": "myThermometer", "title": "Emotiemeter"})]}
#CELL 'tweetcountcell' {'event': 'createThermometerGadget', 'data': [json_serialize({"cell": "tweetcountcell", "id": "myTweetcount", "title": "Count"})]}
CELL 'image' {'event': 'createImageGadget', 'data': [json_serialize({"cell": "imagecell", "id": "myImage"})]}


DECLARE bata_gerelateerd = csv_read_kv_dict('modules/bata_gerelateerd.csv',1,0)
DECLARE tussenstand = csv_read_kv_dict('modules/tussenstand.csv',1,0)
DECLARE sentiment = csv_read_kv_dict('modules/emotie.csv',1,0)
DECLARE ntweets = 0
DECLARE ntweets_emotie_loos = 0
DECLARE ntweets_emotie = 0
DECLARE ntweets_emotie_positief = 0
DECLARE ntweets_emotie_negatief = 0
DECLARE word_dict = {}
DECLARE media_urls = ['']

#Als alle tweets geweest zijn dan de meeste variabellen opruimen
RULE: the_finalization_rule
EVENT: finalize
CONDITION: True
ACTION:	print("done")
	bata_gerelateerd = None
	tussenstand = None
	sentiment = None
	word_dict = None
	media_urls = None


#Voor elke nieuwe twet bepalen of deze batagerelateerd is.
# Zo ja dan een nieuw event 'new_bata_tweet'
RULE: new_tweet_rule
EVENT: new_tweet
CONDITION: bata_gerelateerd[new_tweet.id] == "Y"
ACTION:	NEWEVENT new_bata_tweet {tweet : new_tweet}

#Alle batagerelateerde tweets weergeven in de bataTweetlist en tellen hoeveel het er zijn in ntweets.
RULE: new_bata_tweet_rule
EVENT: new_bata_tweet
CONDITION: True
ACTION:	add_tweetlist_tweet('bataTweetlist', new_bata_tweet.tweet.json_dict)
	ntweets += 1
	#updateThermometer('myTweetcount', ntweets)

#Voor alle bata tweet kijken of er een foto met de tweet meeverstuurd is en of het een nieuwe foto is.
# Zo ja dan deze foto op het dashboard weergeven.
RULE: new_bata_tweet_rule_images
EVENT: new_bata_tweet
CONDITION: NOT (getmediaurl(new_bata_tweet.tweet) IN media_urls)
ACTION:	updateImage('myImage', getmediaurl(new_bata_tweet.tweet))
	media_urls.append(getmediaurl(new_bata_tweet.tweet))

#Voor alle bata tweets bepalen of deze informatie over de tussenstand bevat.
# Zo ja dan deze tweet weergeven in standTweetlist
RULE: new_bata_tweet_rule_stand
EVENT: new_bata_tweet
CONDITION: tussenstand[new_bata_tweet.tweet.id] == "Y"
ACTION:	add_tweetlist_tweet('standTweetlist', new_bata_tweet.tweet.json_dict)

#Voor alle bata tweet bepalen of ze emotie bevatten.
# Zo ja dan een nieuw even 'new_emotie_tweet'
RULE: emotie_new_bata_tweet_rule
EVENT: new_bata_tweet
CONDITION: sentiment[new_bata_tweet.tweet.id] != "_"
ACTION:	NEWEVENT new_emotie_tweet {tweet : new_bata_tweet.tweet}

#Alle tweets met emotie tellen in ntweets_emotie en de emotiemeter updaten.
RULE: new_emotie_tweet_rule
EVENT: new_emotie_tweet
CONDITION: True
ACTION:	ntweets_emotie += 1
	updateThermometer('myThermometer', (ntweets_emotie_positief / ntweets_emotie) )

#Voor alle bata tweets bepalen of ze geen emotie bevatten.
# Zo ja dan nieuw event 'new_emotie_loze_tweet'
RULE: emotie_new_bata_tweet_rule
EVENT: new_bata_tweet
CONDITION: sentiment[new_bata_tweet.tweet.id] == "_"
ACTION:	NEWEVENT new_emotie_loze_tweet {tweet : new_bata_tweet.tweet}

#Alle emotie loze tweets tellen.
RULE: new_emotie_loze_tweet_rule
EVENT: new_emotie_loze_tweet
CONDITION: True
ACTION:	ntweets_emotie_loos += 1

#Voor alle tweets met emotie bepalen of ze positieve emotie bevatten.
# Zo ja dan nieuw een event new_emotie_positief_tweet
RULE: new_bata_tweet_rule_emotie_p
EVENT: new_emotie_tweet
CONDITION: sentiment[new_emotie_tweet.tweet.id] == "+"
ACTION:	NEWEVENT new_emotie_positief_tweet {tweet : new_emotie_tweet.tweet}

#Alle tweets met positieve emote tellen in ntweets_emotie_positief
RULE: new_emotie_positief_tweet_rule
EVENT: new_emotie_positief_tweet
CONDITION: True
ACTION:	ntweets_emotie_positief += 1

#Voor alle tweets met emotie bepalen of ze negatieve emotie bevatten.
# Zo ja dan nieuw een event new_emotie_negatief_tweet
RULE: new_bata_tweet_rule_emotie_n
EVENT: new_emotie_tweet
CONDITION: sentiment[new_emotie_tweet.tweet.id] == "-"
ACTION:	NEWEVENT new_emotie_negatief_tweet {tweet : new_emotie_tweet.tweet}

#Alle tweets met negatieve emote tellen in ntweets_emotie_negatief
RULE: new_emotie_negatief_tweet_rule
EVENT: new_emotie_negatief_tweet
CONDITION: True
ACTION:	ntweets_emotie_negatief += 1

#Bij elke bata tweet kijken of het huidige aantal deelbaar is door 10.
# Zo ja dan de word cloud bijwerken.
RULE: wordcloud_updater
EVENT: new_bata_tweet
CONDITION: (ntweets % 10) == 0
ACTION:	update_wordcloud('myWordCloud', filter_notgreater(word_dict, 0))

#Alle tweets met emoties opsplittsen in lossen worden en per woord een nieuw event 'new_emotie_word'
RULE: new_emotie_tweet_rule
EVENT: new_emotie_tweet
CONDITION: True
ACTION:	FORALL w IN getwords(new_emotie_tweet.tweet.text): NEWEVENT new_emotie_word {word: w}

#Alle tweets zonder emoties opsplittsen in lossen worden en per woord een nieuw event 'new_emotie_loos_word'
RULE: new_emotie_loze_tweet_rule
EVENT: new_emotie_loze_tweet
CONDITION: True
ACTION:	FORALL w IN getwords(new_emotie_loze_tweet.tweet.text): NEWEVENT new_emotie_loos_word {word: w}

#Voor elk woord uit een tweet met emotie kijken of het niet voor komt in een lijst met stopwoorden.
# Als het geen stopwoord is dan tellen hoevaak het woord voorkomt.
RULE: new_emotie_word_rule
EVENT: new_emotie_word
CONDITION: NOT ( new_emotie_word.word IN stopwords() )
ACTION:	IF new_emotie_word.word IN word_dict THEN word_dict[new_emotie_word.word] =  word_dict[new_emotie_word.word] + 1 ELSE word_dict[new_emotie_word.word] = 1

#Voor elk woord uit een tweet zonder emotie kijken of het niet voor komt in een lijst met stopworden.
# Als het geen stopwoord is dan 'negatief tellen' hoevaak het woord voorkomt.
RULE: new_emotie_loos_word_rule
EVENT: new_emotie_loos_word
CONDITION: NOT ( new_emotie_loos_word.word IN stopwords() )
ACTION:	IF new_emotie_loos_word.word IN word_dict THEN word_dict[new_emotie_loos_word.word] =  word_dict[new_emotie_loos_word.word] - 1 ELSE word_dict[new_emotie_loos_word.word] = -1
